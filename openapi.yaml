openapi: 3.0.0
info:
    title: Fiverr API
    description: 'Fiverr API documentation - created by Nghia Van'
    contact:
        name: Nghia Van
        url: https://github.com/nghiavan0610
        email: nghiavan0610@gmail.com
    version: '1.0'
servers:
    - url: 'https://fiverr.cyclic.app/api/v1'
paths:
    /auth/signin:
        post:
            tags:
                - auth
            summary: Sign In
            operationId: SignIn
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/SignInRequest'
                                - example:
                                      email: admin@gmail.com
                                      password: p@ssword
                        example:
                            email: admin@gmail.com
                            password: p@ssword
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /auth/refresh-token:
        post:
            tags:
                - auth
            summary: Refresh Token
            operationId: RefreshToken
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security:
                - refreshBearer: []
    /api/auth/facebook/signin:
        get:
            tags:
                - auth
            summary: Facebook Sign In
            operationId: FacebookSignIn
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /api/auth/google/signin:
        get:
            tags:
                - auth
            summary: Google Sign In
            operationId: GoogleSignIn
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /auth/signup:
        post:
            tags:
                - auth
            summary: Sign Up
            operationId: SignUp
            parameters: []
            requestBody:
                description: |-
                    - 'gender': 'none', 'male', 'female', 'other'

                    - 'birthday': YYYY-MM-DD
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/SignUpRequest'
                                - example:
                                      name: test1
                                      email: test1@gmail.com
                                      password: p@ssword
                                      birthday: 
                                      gender: 
                                      phone: 
                        example:
                            name: test1
                            email: test1@gmail.com
                            password: p@ssword
                            birthday: 
                            gender: 
                            phone: 
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /auth/signout:
        get:
            tags:
                - auth
            summary: Sign Out
            operationId: SignOut
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /gigs:
        get:
            tags:
                - gigs
            summary: Get All Gigs
            operationId: GetAllGigs
            parameters:
                - name: query
                  in: query
                  description: '{Optional} Your search'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: category
                  in: query
                  description: '{categoryId} Can only filter 1 out of 3 Categories'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: integer
                      format: int32
                - name: sub_category
                  in: query
                  description: '{subCategoryId} Can only filter 1 out of 3 Categories'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: inte
                      format: int32
                - name: service
                  in: query
                  description: '{serviceId} Can only filter 1 out of 3 Categories'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: inte
                      format: int32
                - name: seller_location
                  in: query
                  description: '{Optional} e.g: Vietnam,Brazil,France'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: gig_range_price
                  in: query
                  description: '{Optional} min,max'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: '10,5000'
                - name: page
                  in: query
                  description: '{Optional}'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: limit
                  in: query
                  description: '{Optional}'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  description: '{Optional} best_selling - new - recommended'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /gigs/{gigSlug}:
        get:
            tags:
                - gigs
            summary: Get Gig By Slug
            operationId: GetGigBySlug
            parameters:
                - name: gigSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: gig-environmental-specialist
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /gigs/create:
        post:
            tags:
                - gigs
            summary: Create Gig
            operationId: CreateGig
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/CreateGigRequest'
                                - example:
                                      name: test
                                      description: 
                                      basicPrice: 10
                                      basicAbout: test
                                      standardPrice: 50
                                      standardAbout: 
                                      premiumPrice: 
                                      premiumAbout: 
                                      gigCategoryId: 1
                                      gigSubCategoryId: 6
                                      gigServiceId: 3
                        example:
                            name: test
                            description: 
                            basicPrice: 10
                            basicAbout: test
                            standardPrice: 50
                            standardAbout: 
                            premiumPrice: 
                            premiumAbout: 
                            gigCategoryId: 1
                            gigSubCategoryId: 6
                            gigServiceId: 3
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /gigs/{gigSlug}/upload-image:
        post:
            tags:
                - gigs
            summary: Upload Gig Image
            operationId: UploadGigImage
            parameters:
                - name: gigSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: test
            requestBody:
                content:
                    multipart/form-data:
                        encoding: {}
                        schema:
                            required:
                                - image
                            type: object
                            properties:
                                image:
                                    type: string
                                    description: '{Required}'
                                    format: binary
                required: false
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /gigs/{gigSlug}/edit:
        put:
            tags:
                - gigs
            summary: Edit Gig
            description: |-
                User can only edit their gigs

                Admin can edit all user's gigs
            operationId: EditGig
            parameters:
                - name: gigSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: test-1
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/EditGigRequest'
                                - example:
                                      name: new
                                      description: 
                                      basicPrice: 101
                                      basicAbout: test
                                      standardPrice: 500
                                      standardAbout: 
                                      premiumPrice: 
                                      premiumAbout: 
                                      gigCategoryId: 1
                                      gigSubCategoryId: 6
                                      gigServiceId: 3
                        example:
                            name: new
                            description: 
                            basicPrice: 101
                            basicAbout: test
                            standardPrice: 500
                            standardAbout: 
                            premiumPrice: 
                            premiumAbout: 
                            gigCategoryId: 1
                            gigSubCategoryId: 6
                            gigServiceId: 3
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /gigs/{gigSlug}/delete:
        put:
            tags:
                - gigs
            summary: Delete Gig
            description: |-
                User can only delete their gigs

                Admin can delete all user's gigs
            operationId: DeleteGig
            parameters:
                - name: gigSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: test
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/DeleteGigRequest'
                                - example:
                                      confrimPassword: p@ssword
                        example:
                            confrimPassword: p@ssword
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users:
        get:
            tags:
                - users
            summary: Get All Users
            operationId: GetAllUsers
            parameters:
                - name: query
                  in: query
                  description: '{Optional} Your search'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: seller_location
                  in: query
                  description: '{Optional} e.g: Vietnam,Brazil,France'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: page
                  in: query
                  description: '{Optional}'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: limit
                  in: query
                  description: '{Optional}'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
                - name: filter
                  in: query
                  description: '{Optional} best_selling - old - recommended'
                  required: false
                  style: form
                  explode: true
                  schema:
                      type: string
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
            security: []
    /users/{userSlug}:
        get:
            tags:
                - users
            summary: Get User By Slug
            operationId: GetUserBySlug
            parameters:
                - name: userSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: user15
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/create:
        post:
            tags:
                - users
            summary: Create User
            description: Require role 'Admin'
            operationId: CreateUser
            parameters: []
            requestBody:
                description: |-
                    - 'role': 'user', 'seller', 'admin'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/CreateUserRequest'
                                - example:
                                      name: test
                                      email: user2000@gmail.com
                                      password: testpassword
                                      role: seller
                        example:
                            name: test
                            email: user2000@gmail.com
                            password: testpassword
                            role: seller
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/{userSlug}/profile/edit:
        put:
            tags:
                - users
            summary: Edit User Profile
            description: |-
                User can only update their profile (not include 'role')

                Admin can update all user profile properties
            operationId: EditUserProfile
            parameters:
                - name: userSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: user10
            requestBody:
                description: |-
                    - 'gender': 'none', 'male', 'female', 'other'

                    - 'birthday': YYYY-MM-DD

                    - 'role': 'user', 'seller', 'admin'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/EditUserProfileRequest'
                                - example:
                                      name: user10
                                      email: user10@gmail.com
                                      birthday: 
                                      gender: 
                                      phone: 
                                      about: 
                                      countryId: 2
                                      role: user
                        example:
                            name: user10
                            email: user10@gmail.com
                            birthday: 
                            gender: 
                            phone: 
                            about: 
                            countryId: 2
                            role: user
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/{userSlug}/security/edit:
        put:
            tags:
                - users
            summary: Edit User Security
            description: |-
                User must fill in 'oldPassword' to check password validity

                Admin just need to create a new password for the user
            operationId: EditUserSecurity
            parameters:
                - name: userSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: user10
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/EditUserSecurityRequest'
                                - example:
                                      oldPassword: 
                                      newPassword: p@ssword
                                      confirmPassword: p@ssword
                        example:
                            oldPassword: 
                            newPassword: p@ssword
                            confirmPassword: p@ssword
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/start-selling:
        put:
            tags:
                - users
            summary: Become A Seller
            operationId: BecomeASeller
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/BecomeASellerRequest'
                                - example:
                                      name: test
                                      phone: 0989999999
                                      about: test
                                      confirmEmail: admin@gmail.com
                        example:
                            name: test
                            phone: 0989999999
                            about: test
                            confirmEmail: admin@gmail.com
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/deleted_users:
        get:
            tags:
                - users
            summary: Get All Deleted Users
            description: Require role 'Admin'
            operationId: GetAllDeletedUsers
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /users/deleted_users/{userSlug}/handle-delete-user:
        put:
            tags:
                - users
            summary: Handle Delete User
            description: Require role 'Admin'
            operationId: HandleDeleteUser
            parameters:
                - name: userSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: user15
            requestBody:
                description: |-
                    method:

                    - 'soft': soft-delete user

                    - 'restore': restore deleted user

                    - 'force': force-delete deleted user
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/HandleDeleteUserRequest'
                                - example:
                                      adminPassword: p@ssword
                                      method: soft 
                        example:
                            adminPassword: p@ssword
                            method: soft 
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/upload-avatar:
        put:
            tags:
                - profile
            summary: Upload Avatar
            operationId: UploadAvatar
            parameters: []
            requestBody:
                content:
                    multipart/form-data:
                        encoding: {}
                        schema:
                            required:
                                - avatar
                            type: object
                            properties:
                                avatar:
                                    type: string
                                    description: '{Required}'
                                    format: binary
                required: false
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/languages/selective-update:
        post:
            tags:
                - profile
            summary: Update Profile Language
            operationId: UpdateProfileLanguage
            parameters: []
            requestBody:
                description: |-
                    method: 

                    - 'create': Create Profile Language

                    - 'update': Update Profile Language, require 'userLanguageId'

                    - 'delete': Delete Profile Language, require 'userLanguageId'

                    level: 'basic' - 'conversational' - 'fluent' - 'native'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateProfileLanguageRequest'
                                - example:
                                      userLanguageId: 
                                      languageId: 2
                                      level: fluent
                                      method: create
                        example:
                            userLanguageId: 
                            languageId: 2
                            level: fluent
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/skills/selective-update:
        post:
            tags:
                - profile
            summary: Update Profile Skill
            operationId: UpdateProfileSkill
            parameters: []
            requestBody:
                description: |-
                    method: 

                    - 'create': Create Profile Skill

                    - 'update': Update Profile Skill, require 'userSkillId'

                    - 'delete': Delete Profile Skill, require 'userSkillId'

                    level: 'beginner', 'intermediate', 'expert'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateProfileSkillRequest'
                                - example:
                                      userSkillId: 
                                      skillId: 2
                                      level: expert
                                      method: create
                        example:
                            userSkillId: 
                            skillId: 2
                            level: expert
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/certification/selective-update:
        post:
            tags:
                - profile
            summary: Update Profile Certification
            operationId: UpdateProfileCertification
            parameters: []
            requestBody:
                description: |-
                    method: 

                    - 'create': Create Profile Certification

                    - 'update': Update Profile Certification, require 'userCertificationId'

                    - 'delete': Delete Profile Certification, require 'userCertificationId'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateProfileCertificationRequest'
                                - example:
                                      userCertificationId: 
                                      name: test
                                      certificatedFrom: adobe
                                      yearOfCertification: 2022
                                      method: create
                        example:
                            userCertificationId: 
                            name: test
                            certificatedFrom: adobe
                            yearOfCertification: 2022
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/education/selective-update:
        post:
            tags:
                - profile
            summary: Update Profile Education
            operationId: UpdateProfileEducation
            parameters: []
            requestBody:
                description: |-
                    method: 

                    - 'create': Create Profile Certification

                    - 'update': Update Profile Certification, require 'userEducationId'

                    - 'delete': Delete Profile Certification, require 'userEducationId'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateProfileEducationRequest'
                                - example:
                                      userEducationId: 
                                      universityId: 1
                                      majorId: 1
                                      countryId: 1
                                      titleId: 2
                                      yearOfGraduation: 2021
                                      method: create
                        example:
                            userEducationId: 
                            universityId: 1
                            majorId: 1
                            countryId: 1
                            titleId: 2
                            yearOfGraduation: 2021
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /profile/deactivate:
        put:
            tags:
                - profile
            summary: Deactivate User Account
            operationId: DeactivateUserAccount
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/DeactivateUserAccountRequest'
                                - example:
                                      confirmPassword: p@ssword 
                        example:
                            confirmPassword: p@ssword 
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /lists:
        get:
            tags:
                - lists
            summary: Get All My Lists
            operationId: GetAllMyLists
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /lists/{listId}:
        get:
            tags:
                - lists
            summary: Get List By Id
            operationId: GetListById
            parameters:
                - name: listId
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: integer
                      format: int32
                      example: 21
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
        put:
            tags:
                - lists
            summary: Edit List
            operationId: EditList
            parameters:
                - name: listId
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: integer
                      format: int32
                      example: 21
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/EditListRequest'
                                - example:
                                      name: test
                                      description: 
                        example:
                            name: test
                            description: 
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
        delete:
            tags:
                - lists
            summary: Delete List
            operationId: DeleteList
            parameters:
                - name: listId
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: integer
                      format: int32
                      example: 21
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /lists/create:
        post:
            tags:
                - lists
            summary: Create List
            operationId: CreateList
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/CreateListRequest'
                                - example:
                                      name: test
                                      description: 
                        example:
                            name: test
                            description: 
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /lists/{listId}/save-item:
        post:
            tags:
                - lists
            summary: Save Item To List
            operationId: SaveItemToList
            parameters:
                - name: listId
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: integer
                      format: int32
                      example: 21
            requestBody:
                description: |-
                    - 'tagType': 'Seller', 'Gig'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/SaveItemToListRequest'
                                - example:
                                      tagId: 7d3143cc-fe31-4b77-a775-a5de0c17caa0
                                      tagType: Seller
                        example:
                            tagId: 7d3143cc-fe31-4b77-a775-a5de0c17caa0
                            tagType: Seller
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /orders/create:
        post:
            tags:
                - orders
            summary: Order Gig
            operationId: OrderGig
            parameters: []
            requestBody:
                description: |-
                    - 'gigPackage': 'basic', 'standard', 'premium'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/OrderGigRequest'
                                - example:
                                      gigId: 47889bc0-0380-4534-9a78-01f99ff95957
                                      gigPackage: basic
                                      quantity: 6
                        example:
                            gigId: 47889bc0-0380-4534-9a78-01f99ff95957
                            gigPackage: basic
                            quantity: 6
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /orders/complete:
        put:
            tags:
                - orders
            summary: Complete Order
            operationId: CompleteOrder
            parameters: []
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/CompleteOrderRequest'
                                - example:
                                      orderId: 302
                        example:
                            orderId: 302
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /orders:
        get:
            tags:
                - orders
            summary: Get All My Orders
            operationId: GetAllMyOrders
            parameters: []
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /orders/{orderId}:
        get:
            tags:
                - orders
            summary: Get My Order By Id
            operationId: GetMyOrderById
            parameters:
                - name: orderId
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: integer
                      format: int32
                      example: 301
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /orders/{tagSlug}/leave-review:
        post:
            tags:
                - orders
            summary: Review Item
            operationId: ReviewItem
            parameters:
                - name: tagSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: gig-environmental-specialist
            requestBody:
                description: |-
                    - 'tagType': 'Gig', 'Seller'

                    - 'rating': 1 - 2 - 3 - 4 - 5
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/ReviewItemRequest'
                                - example:
                                      rating: 4
                                      content: good good
                                      tagType: Gig
                        example:
                            rating: 4
                            content: good good
                            tagType: Gig
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories:
        get:
            tags:
                - categories
            summary: Get All Categories
            operationId: GetAllCategories
            parameters:
                - name: type
                  in: query
                  description: 
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: gig_services
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/{gigCategorySlug}:
        get:
            tags:
                - categories
            summary: Get Gig Category By Slug
            operationId: GetGigCategoryBySlug
            parameters:
                - name: gigCategorySlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: software-engineer-ii
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/selective-update:
        post:
            tags:
                - categories
            summary: Update Gig Category
            description: Require role 'Admin'
            operationId: UpdateGigCategory
            parameters: []
            requestBody:
                description: |-
                    method:

                    - 'create': Create Gig Category

                    - 'update': Update Gig Category, require 'gigCategoryId'

                    - 'delete': Delete Gig Category, require 'gigCategoryId'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateGigCategoryRequest'
                                - example:
                                      id: 
                                      name: test
                                      method: create
                        example:
                            id: 
                            name: test
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/sub_categories/{gigSubCategorySlug}:
        get:
            tags:
                - categories
            summary: Get Sub Category By Slug
            operationId: GetSubCategoryBySlug
            parameters:
                - name: gigSubCategorySlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: sub-executive-secretary
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/sub_categories/selective-update:
        post:
            tags:
                - categories
            summary: Update Gig Sub Category
            descripion: Require role 'Admin'
            operationId: UpdateGigSubCategory
            parameters: []
            requestBody:
                description: |-
                    method:

                    - 'create': Create Gig Sub_Category

                    - 'update': Update Gig Sub_Category, require 'gigSubCategoryId'

                    - 'delete': Delete Gig Sub_Category, require 'gigSubCategoryId'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateGigSubCategoryRequest'
                                - example:
                                      id: 
                                      name: test
                                      method: create
                        example:
                            id: 
                            name: test
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/services/{gigServiceSlug}:
        get:
            tags:
                - categories
            summary: Get Gig Service By Slug
            operationId: GetGigServiceBySlug
            parameters:
                - name: gigServiceSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: service-tax-accountant
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /categories/services/selective-update:
        post:
            tags:
                - categories
            summary: Update Gig Service
            description: Require role 'Admin'
            operationId: UpdateGigService
            parameters: []
            requestBody:
                description: |-
                    method:

                    - 'create': Create Gig Service

                    - 'update': Update Gig Service, require 'gigServiceId'

                    - 'delete': Delete Gig Service, require 'gigServiceId'
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/UpdateGigServiceRequest'
                                - example:
                                      id: 
                                      name: test
                                      method: create
                        example:
                            id: 
                            name: test
                            method: create
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /complement:
        get:
            tags:
                - complement
            summary: Get All Complements
            operationId: GetAllComplements
            parameters:
                - name: type
                  in: query
                  description: |-
                      - 'skills'

                      - 'languages'

                      - 'universities'

                      - 'countries'

                      - 'majors'

                      - 'titles'
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: countries
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /complement/{typeSlug}:
        get:
            tags:
                - complement
            summary: Get Complement By Slug
            operationId: GetComplementBySlug
            parameters:
                - name: type
                  in: query
                  description: |-
                      - 'skills'

                      - 'languages'

                      - 'universities'

                      - 'countries'

                      - 'majors'

                      - 'titles'
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: countries
                - name: typeSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: vietnam
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /complement/create:
        post:
            tags:
                - complement
            summary: Create Complement
            operationId: CreateComplement
            parameters:
                - name: type
                  in: query
                  description: |-
                      - 'skills'

                      - 'languages'

                      - 'universities'

                      - 'countries'

                      - 'majors'

                      - 'titles'
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: countries
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/CreateComplementRequest'
                                - example:
                                      name: test
                                      type: skills
                        example:
                            name: test
                            type: skills
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /complement/{typeSlug}/edit:
        put:
            tags:
                - complement
            summary: Edit Complement
            operationId: EditComplement
            parameters:
                - name: type
                  in: query
                  description: |-
                      - 'skills'

                      - 'languages'

                      - 'universities'

                      - 'countries'

                      - 'majors'

                      - 'titles'
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: countries
                - name: typeSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: vietnam
            requestBody:
                description: 
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/EditComplementRequest'
                                - example:
                                      name: test new
                        example:
                            name: test new
                required: true
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
    /complement/{typeSlug}/delete:
        delete:
            tags:
                - complement
            summary: Delete Complement
            operationId: DeleteComplement
            parameters:
                - name: type
                  in: query
                  description: |-
                      - 'skills'

                      - 'languages'

                      - 'universities'

                      - 'countries'

                      - 'majors'

                      - 'titles'
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: string
                      example: countries
                - name: typeSlug
                  in: path
                  description: '{Required}'
                  required: true
                  style: simple
                  schema:
                      type: string
                      example: china
            responses:
                '200':
                    description: 
                    headers: {}
            deprecated: false
components:
    schemas:
        SignInRequest:
            title: SignInRequest
            required:
                - email
                - password
            type: object
            properties:
                email:
                    type: string
                password:
                    type: string
                    format: password
            example:
                email: admin@gmail.com
                password: p@ssword
        SignUpRequest:
            title: SignUpRequest
            required:
                - name
                - email
                - password
                - birthday
                - gender
                - phone
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                    format: password
                birthday:
                    type: string
                gender:
                    type: string
                    enum:
                        - none
                        - male
                        - female
                        - other
                    default: 
                        - none
                phone:
                    type: string
            example:
                name: test1
                email: test1@gmail.com
                password: p@ssword
                birthday: 
                gender: 
                phone: 
        CreateGigRequest:
            title: CreateGigRequest
            required:
                - name
                - description
                - basicPrice
                - basicAbout
                - standardPrice
                - standardAbout
                - premiumPrice
                - premiumAbout
                - gigCategoryId
                - gigSubCategoryId
                - gigServiceId
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                basicPrice:
                    type: number
                    format: float
                basicAbout:
                    type: string
                standardPrice:
                    type: number
                    format: float
                standardAbout:
                    type: string
                premiumPrice:
                    type: number
                    format: float
                premiumAbout:
                    type: string
                gigCategoryId:
                    type: integer
                    format: int32
                gigSubCategoryId:
                    type: integer
                    format: int32
                gigServiceId:
                    type: integer
                    format: int32
            example:
                name: test
                description: 
                basicPrice: 10
                basicAbout: test
                standardPrice: 50
                standardAbout: 
                premiumPrice: 
                premiumAbout: 
                gigCategoryId: 1
                gigSubCategoryId: 6
                gigServiceId: 3
        EditGigRequest:
            title: EditGigRequest
            required:
                - name
                - description
                - basicPrice
                - basicAbout
                - standardPrice
                - standardAbout
                - premiumPrice
                - premiumAbout
                - gigCategoryId
                - gigSubCategoryId
                - gigServiceId
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                basicPrice:
                    type: number
                    format: float
                basicAbout:
                    type: string
                standardPrice:
                    type: number
                    format: float
                standardAbout:
                    type: string
                premiumPrice:
                    type: number
                    format: float
                premiumAbout:
                    type: string
                gigCategoryId:
                    type: integer
                    format: int32
                gigSubCategoryId:
                    type: integer
                    format: int32
                gigServiceId:
                    type: integer
                    format: int32
            example:
                name: new
                description: 
                basicPrice: 101
                basicAbout: test
                standardPrice: 500
                standardAbout: 
                premiumPrice: 
                premiumAbout: 
                gigCategoryId: 1
                gigSubCategoryId: 6
                gigServiceId: 3
        DeleteGigRequest:
            title: DeleteGigRequest
            required:
                - confirmPassword
            type: object
            properties:
                confirmPassword:
                    type: string
                    format: password
            example:
                confirmPassword: p@ssword
        CreateUserRequest:
            title: CreateUserRequest
            required:
                - name
                - email
                - password
                - role
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                    format: password
                role:
                    type: string
            example:
                name: test
                email: user2000@gmail.com
                password: testpassword
                role: seller
        EditUserProfileRequest:
            title: EditUserProfileRequest
            required:
                - name
                - email
                - birthday
                - gender
                - phone
                - about
                - countryId
                - role
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                birthday:
                    type: string
                gender:
                    type: string
                    enum:
                        - none
                        - male
                        - female
                        - other
                    default: 
                        - none
                phone:
                    type: string
                about:
                    type: string
                countryId:
                    type: integer
                    format: int32
                role:
                    type: string
            example:
                name: user10
                email: user10@gmail.com
                birthday: 
                gender: 
                phone: 
                about: 
                countryId: 2
                role: user
        EditUserSecurityRequest:
            title: EditUserSecurityRequest
            required:
                - oldPassword
                - newPassword
                - confirmPassword
            type: object
            properties:
                oldPassword:
                    type: string
                    format: password
                newPassword:
                    type: string
                    format: password
                confirmPassword:
                    type: string
                    format: password
            example:
                oldPassword: 
                newPassword: p@ssword
                confirmPassword: p@ssword
        BecomeASellerRequest:
            title: BecomeASellerRequest
            required:
                - name
                - phone
                - about
                - confirmEmail
            type: object
            properties:
                name:
                    type: string
                phone:
                    type: string
                about:
                    type: string
                confirmEmail:
                    type: string
            example:
                name: test
                phone: 0989999999
                about: test
                confirmEmail: admin@gmail.com
        HandleDeleteUserRequest:
            title: HandleDeleteUserRequest
            required:
                - adminPassword
                - method
            type: object
            properties:
                adminPassword:
                    type: string
                    format: password
                method:
                    type: string
            example:
                adminPassword: p@ssword
                method: soft
        UpdateProfileLanguageRequest:
            title: UpdateProfileLanguageRequest
            required:
                - userLanguageId
                - languageId
                - level
                - method
            type: object
            properties:
                userLanguageId:
                    type: integer
                    format: int32
                languageId:
                    type: integer
                    format: int32
                level:
                    type: string
                method:
                    type: string
            example:
                userLanguageId: 
                languageId: 2
                level: fluent
                method: create
        UpdateProfileSkillRequest:
            title: UpdateProfileSkillRequest
            required:
                - userSkillId
                - skillId
                - level
                - method
            type: object
            properties:
                userSkillId:
                    type: integer
                    format: int32
                skillId:
                    type: integer
                    format: int32
                level:
                    type: string
                method:
                    type: string
            example:
                userSkillId: 
                skillId: 2
                level: expert
                method: create
        UpdateProfileCertificationRequest:
            title: UpdateProfileCertificationRequest
            required:
                - userCertificationId
                - name
                - certificatedFrom
                - yearOfCertification
                - method
            type: object
            properties:
                userCertificationId:
                    type: integer
                    format: int32
                name:
                    type: string
                certificatedFrom:
                    type: string
                yearOfCertification:
                    type: string
                method:
                    type: string
            example:
                userCertificationId: 
                name: test
                certificatedFrom: adobe
                yearOfCertification: 2022
                method: create
        UpdateProfileEducationRequest:
            title: UpdateProfileEducationRequest
            required:
                - userEducationId
                - universityId
                - majorId
                - countryId
                - titleId
                - yearOfGraduation
                - method
            type: object
            properties:
                userEducationId:
                    type: integer
                    format: int32
                universityId:
                    type: integer
                    format: int32
                majorId:
                    type: integer
                    format: int32
                countryId:
                    type: integer
                    format: int32
                titleId:
                    type: integer
                    format: int32
                yearOfGraduation:
                    type: string
                method:
                    type: string
            example:
                userEducationId: 
                universityId: 1
                majorId: 1
                countryId: 1
                titleId: 2
                yearOfGraduation: 2021
                method: create
        DeactivateUserAccountRequest:
            title: DeactivateUserAccountRequest
            required:
                - confirmPassword
            type: object
            properties:
                confirmPassword:
                    type: string
                    format: password
            example:
                confirmPassword: p@ssword
        CreateListRequest:
            title: CreateListRequest
            required:
                - name
                - description
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
            example:
                name: test
                description: 
        EditListRequest:
            title: EditListRequest
            required:
                - name
                - description
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
            example:
                name: test
                description: 
        SaveItemToListRequest:
            title: SaveItemToListRequest
            required:
                - tagId
                - tagType
            type: object
            properties:
                tagId:
                    type: string
                tagType:
                    type: string
            example:
                tagId: 7d3143cc-fe31-4b77-a775-a5de0c17caa0
                tagType: Seller
        OrderGigRequest:
            title: OrderGigRequest
            required:
                - gigId
                - gigPackage
                - quantity
            type: object
            properties:
                gigId:
                    type: string
                gigPackage:
                    type: string
                quantity:
                    type: string
            example:
                gigId: 47889bc0-0380-4534-9a78-01f99ff95957
                gigPackage: basic
                quantity: 6
        CompleteOrderRequest:
            title: CompleteOrderRequest
            required:
                - orderId
            type: object
            properties:
                orderId:
                    type: integer
                    format: int32
            example:
                orderId: 302
        ReviewItemRequest:
            title: ReviewItemRequest
            required:
                - rating
                - content
                - tagType
            type: object
            properties:
                rating:
                    type: integer
                    format: int32
                content:
                    type: string
                tagType:
                    type: string
            example:
                rating: 4
                content: good good
                tagType: Gig
        UpdateGigCategoryRequest:
            title: UpdateGigCategoryRequest
            required:
                - id
                - name
                - method
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                method:
                    type: string
            example:
                id: 
                name: test
                method: create
        UpdateGigSubCategoryRequest:
            title: UpdateGigSubCategoryRequest
            required:
                - id
                - name
                - method
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                method:
                    type: string
            example:
                id: 
                name: test
                method: create
        UpdateGigServiceRequest:
            title: UpdateGigServiceRequest
            required:
                - id
                - name
                - method
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                method:
                    type: string
            example:
                id: 
                name: test
                method: create
        CreateComplementRequest:
            title: CreateComplementRequest
            required:
                - name
            type: object
            properties:
                name:
                    type: string
            example:
                name: test
        EditComplementRequest:
            title: EditComplementRequest
            required:
                - name
            type: object
            properties:
                name:
                    type: string
            example:
                name: test new
    securitySchemes:
        accessBearer:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: >-
                JWT Authorization header using the Bearer scheme. 
                Enter the access token in the text input below.
        refreshBearer:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: >-
                Enter the refresh token to get new access token in the text input below.
security:
    - accessBearer: []
security:
    - refreshBearer: []
tags:
    - name: auth
    - name: gigs
    - name: users
    - name: profile
    - name: lists
    - name: orders
    - name: categories
    - name: complement
